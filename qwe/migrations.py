import psycopg2
from datetime import datetime
import os
import sys

class DatabaseMigrator:
    def __init__(self, config):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            config (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        """
        self.config = config
        self.connection = None
        self.cursor = None
        
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = psycopg2.connect(
                host=self.config['host'],
                port=self.config['port'],
                database=self.config.get('database', 'python_db'),
                user=self.config['user'],
                password=self.config['password']
            )
            self.cursor = self.connection.cursor()
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
            
    def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.connection:
            self.cursor.close()
            self.connection.close()
            
    def create_migrations_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        try:
            self.cursor.execute("""
                CREATE TABLE IF NOT EXISTS migrations (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(255) NOT NULL UNIQUE,
                    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            self.connection.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            return False
            
    def is_migration_applied(self, migration_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ –º–∏–≥—Ä–∞—Ü–∏—è"""
        try:
            self.cursor.execute("SELECT id FROM migrations WHERE name = %s", (migration_name,))
            return self.cursor.fetchone() is not None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
            
    def mark_migration_applied(self, migration_name):
        """–û—Ç–º–µ—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–π"""
        try:
            self.cursor.execute(
                "INSERT INTO migrations (name) VALUES (%s)", 
                (migration_name,)
            )
            self.connection.commit()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
            
    def run_migration(self, migration_name, sql_commands):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Args:
            migration_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
            sql_commands (list): –°–ø–∏—Å–æ–∫ SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if self.is_migration_applied(migration_name):
            print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è '{migration_name}' —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
            return True
            
        print(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_name}")
        
        try:
            for i, sql in enumerate(sql_commands, 1):
                print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {i}/{len(sql_commands)}...")
                self.cursor.execute(sql)
                
            self.connection.commit()
            
            if self.mark_migration_applied(migration_name):
                print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è '{migration_name}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—É—é")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ '{migration_name}': {e}")
            self.connection.rollback()
            return False

def get_migrations():
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ {–Ω–∞–∑–≤–∞–Ω–∏–µ: [sql_commands]}
    """
    migrations = {
        '001_add_phone_column': [
            "ALTER TABLE users ADD COLUMN IF NOT EXISTS phone VARCHAR(20)",
            "COMMENT ON COLUMN users.phone IS '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'"
        ],
        
        '002_add_status_column': [
            "ALTER TABLE users ADD COLUMN IF NOT EXISTS status VARCHAR(20) DEFAULT 'active'",
            "COMMENT ON COLUMN users.status IS '–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: active/inactive'",
            "ALTER TABLE users ADD CONSTRAINT check_status CHECK (status IN ('active', 'inactive'))"
        ],
        
        '003_create_user_profiles_table': [
            """
            CREATE TABLE IF NOT EXISTS user_profiles (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                address TEXT,
                city VARCHAR(100),
                country VARCHAR(100),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """,
            "CREATE INDEX IF NOT EXISTS idx_user_profiles_user_id ON user_profiles(user_id)"
        ],
        
        '004_add_user_profile_data': [
            """
            INSERT INTO user_profiles (user_id, city, country)
            SELECT id, '–ú–æ—Å–∫–≤–∞', '–†–æ—Å—Å–∏—è' FROM users
            WHERE NOT EXISTS (SELECT 1 FROM user_profiles WHERE user_profiles.user_id = users.id)
            """
        ],
        
        '005_create_audit_log_table': [
            """
            CREATE TABLE IF NOT EXISTS audit_log (
                id SERIAL PRIMARY KEY,
                table_name VARCHAR(100) NOT NULL,
                record_id INTEGER NOT NULL,
                action VARCHAR(10) NOT NULL,
                old_data JSONB,
                new_data JSONB,
                changed_by VARCHAR(100),
                changed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """,
            "CREATE INDEX IF NOT EXISTS idx_audit_log_table_record ON audit_log(table_name, record_id)",
            "CREATE INDEX IF NOT EXISTS idx_audit_log_changed_at ON audit_log(changed_at)"
        ]
    }
    
    return migrations

def run_all_migrations():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
    try:
        from db_config import DB_CONFIG
    except ImportError:
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup.py —Å–Ω–∞—á–∞–ª–∞.")
        return False
        
    migrator = DatabaseMigrator(DB_CONFIG)
    
    if not migrator.connect():
        return False
        
    if not migrator.create_migrations_table():
        migrator.disconnect()
        return False
        
    migrations = get_migrations()
    applied_count = 0
    
    print(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(migrations)} –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
    print("=" * 50)
    
    for migration_name, sql_commands in migrations.items():
        if migrator.run_migration(migration_name, sql_commands):
            applied_count += 1
        else:
            print(f"‚ùå –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
            migrator.disconnect()
            return False
            
    migrator.disconnect()
    
    print("=" * 50)
    print(f"üéâ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: {applied_count}/{len(migrations)}")
    
    return applied_count == len(migrations)

def show_migration_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
    try:
        from db_config import DB_CONFIG
    except ImportError:
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    migrator = DatabaseMigrator(DB_CONFIG)
    
    if not migrator.connect():
        return
        
    if not migrator.create_migrations_table():
        migrator.disconnect()
        return
        
    migrations = get_migrations()
    
    print("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
    print("-" * 40)
    
    for migration_name in migrations.keys():
        if migrator.is_migration_applied(migration_name):
            print(f"‚úÖ {migration_name} - –ü–†–ò–ú–ï–ù–ï–ù–ê")
        else:
            print(f"‚ùå {migration_name} - –ù–ï –ü–†–ò–ú–ï–ù–ï–ù–ê")
            
    migrator.disconnect()

def rollback_last_migration():
    """–û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏ (–¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)"""
    try:
        from db_config import DB_CONFIG
    except ImportError:
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False
        
    migrator = DatabaseMigrator(DB_CONFIG)
    
    if not migrator.connect():
        return False
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é
        migrator.cursor.execute("""
            SELECT name FROM migrations 
            ORDER BY applied_at DESC, id DESC 
            LIMIT 1
        """)
        last_migration = migrator.cursor.fetchone()
        
        if not last_migration:
            print("‚ùå –ù–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞")
            migrator.disconnect()
            return False
            
        migration_name = last_migration[0]
        print(f"üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_name}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –∫–∞–∂–¥–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
        rollback_commands = {
            '001_add_phone_column': [
                "ALTER TABLE users DROP COLUMN IF EXISTS phone"
            ],
            '002_add_status_column': [
                "ALTER TABLE users DROP CONSTRAINT IF EXISTS check_status",
                "ALTER TABLE users DROP COLUMN IF EXISTS status"
            ],
            '003_create_user_profiles_table': [
                "DROP TABLE IF EXISTS user_profiles"
            ],
            '004_add_user_profile_data': [
                "TRUNCATE TABLE user_profiles"  # –≠—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–ª–∞ –¥–∞–Ω–Ω—ã–µ
            ],
            '005_create_audit_log_table': [
                "DROP TABLE IF EXISTS audit_log"
            ]
        }
        
        if migration_name in rollback_commands:
            for sql in rollback_commands[migration_name]:
                migrator.cursor.execute(sql)
                
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏
            migrator.cursor.execute("DELETE FROM migrations WHERE name = %s", (migration_name,))
            migrator.connection.commit()
            
            print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è '{migration_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—Ç–∞–Ω–∞")
            migrator.disconnect()
            return True
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ '{migration_name}'")
            migrator.disconnect()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        migrator.connection.rollback()
        migrator.disconnect()
        return False

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 40)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π")
        print("3. –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–≥—Ä–∞—Ü–∏—é")
        print("4. –í—ã—Ö–æ–¥")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
        
        if choice == '1':
            run_all_migrations()
        elif choice == '2':
            show_migration_status()
        elif choice == '3':
            confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å (yes/NO): ").strip().lower()
            if confirm == 'yes':
                rollback_last_migration()
            else:
                print("‚ùå –û—Ç–∫–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        elif choice == '4':
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()