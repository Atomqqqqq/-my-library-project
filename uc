my_python_project/
‚îú‚îÄ‚îÄ app.py
‚îú‚îÄ‚îÄ database.py
‚îú‚îÄ‚îÄ models.py
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ README.md
–°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã:
requirements.txt

txt
sqlite3
–°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã:
require.txt

txt
sqlite3
–∏–º–ø–æ—Ä—Ç sqlite3
–∏–∑ –º–æ–¥–µ–ª–µ–π –∏–º–ø–æ—Ä—Ç create_tables

class DatabaseManager:
"""–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite"""

def __init__(self, db_name="library.db"):
    self.db_name = db_name
    self.connection = None

def connect(self):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        self.connection = sqlite3.connect(self.db_name)
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return self.connection
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {e}")
        return None

def disconnect(self):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    if self.connection:
        self.connection.close()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

def initialize_database(self):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
    connection = self.connect()
    if connection:
        create_tables(connection)
        self.disconnect()
models.py - –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
def create_tables(connection):
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

Args:
    connection: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
"""
cursor = connection.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–Ω–∏–≥
cursor.execute('''
    CREATE TABLE IF NOT EXISTS books (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        author TEXT NOT NULL,
        year INTEGER,
        is_available BOOLEAN DEFAULT 1
    )
''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL
    )
''')

connection.commit()
print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
–ö–ª–∞—Å—Å –ö–Ω–∏–≥–∞:
"""–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""

def __init__(self, title, author, year, is_available=True):
    self.title = title
    self.author = author
    self.year = year
    self.is_available = is_available

def save(self, connection):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    cursor = connection.cursor()
    cursor.execute('''
        INSERT INTO books (title, author, year, is_available)
        VALUES (?, ?, ?, ?)
    ''', (self.title, self.author, self.year, self.is_available))
    connection.commit()
    return cursor.lastrowid
class User:
"""–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

def __init__(self, name, email):
    self.name = name
    self.email = email

def save(self, connection):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    cursor = connection.cursor()
    cursor.execute('''
        INSERT INTO users (name, email)
        VALUES (?, ?)
    ''', (self.name, self.email))
    connection.commit()
    return cursor.lastrowid
app.py - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö DatabaseManager
–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π –ö–Ω–∏–≥–∞, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

def main():
"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö db_manager = DatabaseManager()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
db_manager.initialize_database()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connection = db_manager.connect()

if connection:
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥
        books = [
            Book("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", 1869),
            Book("–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ", "–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", 1866),
            Book("–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤", 1967)
        ]
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–∏–≥ –≤ –±–∞–∑—É
        for book in books:
            book_id = book.save(connection)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞: {book.title} (ID: {book_id})")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = [
            User("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "ivan@example.com"),
            User("–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", "petr@example.com")
        ]
        
        for user in users:
            user_id = user.save(connection)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.name} (ID: {user_id})")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        print("\nüìñ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥:")
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM books")
        books = cursor.fetchall()
        
        for book in books:
            print(f"ID: {book[0]}, –ù–∞–∑–≤–∞–Ω–∏–µ: {book[1]}, –ê–≤—Ç–æ—Ä: {book[2]}, –ì–æ–¥: {book[3]}")
        
        print("\nüë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        cursor.execute("SELECT * FROM users")
        users = cursor.fetchall()
        
        for user in users:
            print(f"ID: {user[0]}, –ò–º—è: {user[1]}, Email: {user[2]}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        db_manager.disconnect()

print("\nüéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
–µ—Å–ª–∏ –∏–º—è == " main ":
main()
[README.md]
