Ключевые принципы полного процесса тестирования:
Раннее начало: Тестирование начинается не тогда, когда код написан, а на этапе анализа требований.

Непрерывность: Тестирование — непрерывный процесс, который идет параллельно с разработкой.

Связь с требованиями: Каждое тестовое действие должно быть связано с конкретным требованием или целью.

Исчерпываемость: 100% тестовое покрытие невозможно, поэтому мы используем техники для определения приоритетов и рисков.

Отсутствие пестицидов: Тестовые сценарии должны регулярно обновляться, иначе они перестают находить новые дефекты.

Этапы полного процесса тестирования (STLC)
Вот 6 ключевых фаз STLC:

1. Анализ требований (Requirements Analysis)
Цель: Понять, ЧТО тестировать, с точки зрения бизнеса и пользователя.

Действия:

Изучение документации (ТЗ, пользовательские истории, спецификации).

Выявление тестируемых и нетестируемых требований.

Анализ двусмысленностей, противоречий и "белых пятен" в требованиях.

Определение приоритетов тестирования на основе важности функциональности.

Результаты: Уточненные и понятные требования, готовые к созданию тестовой документации.

2. Планирование тестирования (Test Planning)
Цель: Определить КАК, КОГДА и КЕМ будет проводиться тестирование. Это стратегический этап.

Действия:

Создание Тестовой Стратегии/Плана (Test Plan) — главного документа, который описывает:

Объем тестирования (что входит, а что нет).

Подходы и методологии (например, ручное/автоматическое, регрессионное тестирование).

Расписание и оценки трудозатрат.

Критерии начала и окончания тестирования (Test Entry/Exit Criteria).

Необходимые ресурсы (люди, окружения, инструменты).

Оценка рисков и способы их mitigation.

Выбор инструментов для тестирования, управления тестами и баг-трекинга.

Результаты: Тестовый План, одобренный командой и заказчиком.

3. Проектирование тестовых случаев (Test Case Design)
Цель: Создать детальные инструкции для проверки функциональности.

Действия:

Создание Тестовых Сценариев (Test Cases) с четкими шагами, входными данными и ожидаемым результатом.

Разработка Тестовых Данных, необходимых для выполнения сценариев.

Подготовка тестового окружения (Test Environment Setup).

Создание Чек-листов (Checklists) для быстрой проверки ключевых функций.

Результаты: Набор тестовых сценариев, тестовые данные, подготовленное тестовое окружение.

4. Настройка тестового окружения (Test Environment Setup)
Цель: Обеспечить инфраструктуру, максимально приближенную к боевой, для выполнения тестов.

Действия:

Развертывание серверов, баз данных, API.

Установка и конфигурация необходимого ПО.

Проверка доступности и стабильности окружения.

Часто это задача DevOps/системных администраторов, но тестировщики обязаны убедиться, что окружение пригодно для тестов.

Результаты: Готовое и стабильное тестовое окружение.

5. Выполнение тестирования (Test Execution)
Цель: Запустить тесты, обнаружить дефекты и убедиться в качестве продукта.

Действия:

Ручное тестирование: Выполнение тестовых сценариев по чек-листам и тест-кейсам.

Автоматизированное тестирование: Запуск автоматизированных скриптов.

Регистрация багов: Ведение баг-репортов в системе управления дефектами (Jira, YouTrack и т.д.). Баг-репорт должен быть четким, воспроизводимым и содержательным.

Регрессионное тестирование: Повторное выполнение тестов после исправления багов, чтобы убедиться, что исправления не сломали существующую функциональность.

Повторное тестирование (Re-test): Проверка конкретного бага после того, как разработчик сообщил о его исправлении.

Результаты: Отчеты о выполнении тестов, лог найденных дефектов.

6. Завершение цикла тестирования (Test Cycle Closure)
Цель: Подвести итоги, извлечь уроки и формально завершить цикл тестирования.

Действия:

Анализ завершенности тестирования на основе критериев выхода (Exit Criteria).

Подготовка Отчета о тестировании (Test Summary Report), который включает:

Общую статистику (количество пройденных/непройденных тестов, найденных/исправленных багов).

Оценку качества продукта.

Критические риски и проблемы, оставшиеся открытыми.

Выводы и рекомендации для следующего цикла.

Проведение ретроспективы внутри команды тестирования: "Что прошло хорошо? Что можно улучшить?".

Архивация тестовых артефактов.

Результаты: Финальный отчет о тестировании, извлеченные уроки, улучшения для следующего цикла.

Уровни и типы тестирования в процессе
Полный процесс включает проверку на разных уровнях и с разных сторон:

Уровень/Тип	Цель
Модульное (Unit)	Проверка отдельных компонентов кода (функций, методов). Выполняется разработчиками.
Интеграционное (Integration)	Проверка взаимодействия между модулями, компонентами или системами.
Системное (System)	Проверка полной, интегрированной системы на соответствие требованиям.
Приемочное (Acceptance)	Финальная проверка заказчиком/пользователем, готова ли система к выпуску.
Функциональное	Проверка "ЧТО делает система" (функции, особенности).
Нефункциональное	Проверка "КАК система работает" (производительность, безопасность, удобство).
Дымовое (Smoke)	Быстрая проверка стабильности основных функций перед глубоким тестированием.
Регрессионное	Проверка, что новые изменения не сломали старую функциональность.
Визуализация процесса








Вывод: Полный процесс тестирования — это комплексная, управляемая и измеримая деятельность. Его правильная организация позволяет не просто находить ошибки, а активно влиять на качество продукта на всех этапах его создания, минимизируя риски и затраты на последующие исправления.
