–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é pytest –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
üìö –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ
–ß—Ç–æ —Ç–∞–∫–æ–µ pytest?

–£—Å—Ç–∞–Ω–æ–≤–∫–∞

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞

–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ pytest

–§–∏–∫—Å—Ç—É—Ä—ã

–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤

–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è

üéØ –ß—Ç–æ —Ç–∞–∫–æ–µ pytest?
pytest - —ç—Ç–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Python-–∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç:

–ü–∏—Å–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∏ —á–∏—Ç–∞–µ–º—ã–µ —Ç–µ—Å—Ç—ã

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã

–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—Ñ–∏–∫—Å—Ç—É—Ä—ã, –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è)

üíª –£—Å—Ç–∞–Ω–æ–≤–∫–∞
–ë–∞–∑–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
bash
pip install pytest
–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
bash
pytest --version
# –∏–ª–∏ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:
python -m pytest --version
üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:

text
my_project/
‚îú‚îÄ‚îÄ src/                 # –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ calculator.py
‚îú‚îÄ‚îÄ tests/              # –¢–µ—Å—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ test_calculator.py
‚îú‚îÄ‚îÄ requirements.txt    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
‚îî‚îÄ‚îÄ pytest.ini         # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest
‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
1. –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å —Å –∫–æ–¥–æ–º
src/calculator.py

python
def add(a: float, b: float) -> float:
    """–°–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª"""
    return a + b

def multiply(a: float, b: float) -> float:
    """–£–º–Ω–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª"""
    return a * b

def divide(a: float, b: float) -> float:
    """–î–µ–ª–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª"""
    if b == 0:
        raise ValueError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
    return a / b
2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç—ã
tests/test_calculator.py

python
import pytest
from src.calculator import add, multiply, divide

class TestCalculator:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    
    def test_add_positive_numbers(self):
        """–¢–µ—Å—Ç —Å–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª"""
        assert add(2, 3) == 5
        assert add(0, 0) == 0
        
    def test_add_negative_numbers(self):
        """–¢–µ—Å—Ç —Å–ª–æ–∂–µ–Ω–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª"""
        assert add(-1, -1) == -2
        assert add(-5, 3) == -2
    
    def test_multiply_basic(self):
        """–¢–µ—Å—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è"""
        assert multiply(3, 4) == 12
        assert multiply(0, 5) == 0
        assert multiply(-2, 3) == -6
    
    def test_divide_normal(self):
        """–¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è"""
        assert divide(10, 2) == 5
        assert divide(5, 2) == 2.5
    
    def test_divide_by_zero(self):
        """–¢–µ—Å—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å"""
        with pytest.raises(ValueError, match="–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"):
            divide(10, 0)
üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
bash
# –í—Å–µ —Ç–µ—Å—Ç—ã
pytest

# –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
pytest -v

# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
pytest tests/test_calculator.py

# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å
pytest tests/test_calculator.py::TestCalculator

# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥
pytest tests/test_calculator.py::TestCalculator::test_add_positive_numbers

# –¢–µ—Å—Ç—ã –ø–æ –∏–º–µ–Ω–∏ (–ø–∞—Ç—Ç–µ—Ä–Ω)
pytest -k "add"

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–≤–æ–¥ print()
pytest -s

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
pytest -x
–ü–æ–ª–µ–∑–Ω—ã–µ —Ñ–ª–∞–≥–∏
bash
# –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
pytest --cov=src

# HTML –æ—Ç—á–µ—Ç
pytest --html=report.html

# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
pytest -n 4

# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
pytest --durations=5
üõ† –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ pytest
1. Assert –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –∫–æ–¥–∞
python
# pytest —Å–∞–º –ø–æ–∫–∞–∂–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
assert result == expected
assert user.is_active
assert len(items) > 0
2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
–§–∞–π–ª—ã: test_*.py –∏–ª–∏ *_test.py

–§—É–Ω–∫—Ü–∏–∏: test_*

–ö–ª–∞—Å—Å—ã: Test*

3. –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö
pytest –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:

–ó–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

–†–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–∂–∏–¥–∞–µ–º—ã–º –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º

Traceback

üîß –§–∏–∫—Å—Ç—É—Ä—ã
–§–∏–∫—Å—Ç—É—Ä—ã - —ç—Ç–æ —Å–ø–æ—Å–æ–± –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤.

–ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞
python
import pytest

@pytest.fixture
def sample_user():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return {
        "name": "John Doe",
        "email": "john@example.com",
        "age": 30
    }

def test_user_age(sample_user):
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏–∫—Å—Ç—É—Ä—É sample_user"""
    assert sample_user["age"] == 30
    assert sample_user["name"] == "John Doe"
–§–∏–∫—Å—Ç—É—Ä–∞ —Å setup/teardown
python
@pytest.fixture
def database_connection():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∏ –æ—á–∏—Å—Ç–∫–æ–π"""
    # Setup - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    connection = connect_to_database()
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    yield connection  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ç–µ—Å—Ç
    
    # Teardown - –æ—á–∏—Å—Ç–∫–∞
    connection.close()
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

def test_database_query(database_connection):
    result = database_connection.execute("SELECT 1")
    assert result is not None
–ê–≤—Ç–æ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã
python
@pytest.fixture(autouse=True)
def setup_environment():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞")
    yield
    print("–ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞")
üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
python
import pytest

@pytest.mark.parametrize("a,b,expected", [
    (1, 2, 3),
    (0, 0, 0),
    (-1, 1, 0),
    (10, -5, 5)
])
def test_add_parametric(a, b, expected):
    """–û–¥–∏–Ω —Ç–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    from src.calculator import add
    assert add(a, b) == expected
–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è —Å ID
python
@pytest.mark.parametrize("a,b,expected", [
    (1, 2, 3),
    (0, 0, 0),
    (-1, 1, 0)
], ids=["positive", "zeros", "negative_positive"])
def test_add_with_ids(a, b, expected):
    assert add(a, b) == expected
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
–§–∞–π–ª pytest.ini
ini
[pytest]
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = -v --tb=short
testpaths = tests
markers =
    slow: –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    integration: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
–§–∞–π–ª pyproject.toml (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
toml
[tool.pytest.ini_options]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["-v", "--tb=short"]
testpaths = ["tests"]

[tool.pytest.ini_options.markers]
slow = "–º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
integration = "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
üè∑ –ú–∞—Ä–∫–µ—Ä—ã
–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤
python
@pytest.mark.slow
def test_long_operation():
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –º–µ–¥–ª–µ–Ω–Ω—ã–π
    time.sleep(5)
    assert True

@pytest.mark.integration
def test_database_integration():
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    assert True
–ó–∞–ø—É—Å–∫ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
bash
# –¢–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
pytest -m "not slow"

# –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
pytest -m integration

# –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
pytest -m slow
üêõ –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è
–ü—Ä–æ–±–ª–µ–º–∞ 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
–û—à–∏–±–∫–∞: ModuleNotFoundError: No module named 'src'

–†–µ—à–µ–Ω–∏–µ:

bash
# –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PYTHONPATH
export PYTHONPATH=.
# –∏–ª–∏
python -m pytest
–ü—Ä–æ–±–ª–µ–º–∞ 2: –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
–û—à–∏–±–∫–∞: SyntaxError: source code string cannot contain null bytes

–†–µ—à–µ–Ω–∏–µ:

python
# –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ñ–∞–π–ª—ã —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
with open('file.py', 'w', encoding='utf-8') as f:
    f.write('–∫–æ–¥')
–ü—Ä–æ–±–ª–µ–º–∞ 3: –ù–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ç–µ—Å—Ç—ã
–†–µ—à–µ–Ω–∏–µ:

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å test_

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å test_

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞

üìà Best Practices
1. –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ
–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã: test_<module>.py

–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: test_<scenario>

–¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã: Test<Feature>

2. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
python
def test_<—á—Ç–æ_—Ç–µ—Å—Ç–∏—Ä—É–µ–º>_<—É—Å–ª–æ–≤–∏—è>_<–æ–∂–∏–¥–∞–µ–º—ã–π_—Ä–µ–∑—É–ª—å—Ç–∞—Ç>():
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    test_add_positive_numbers_returns_sum()
    test_user_login_with_invalid_password_raises_error()
3. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
–ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º –∏ –Ω–µ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤.

4. –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å
python
# –•–æ—Ä–æ—à–æ
def test_user_creation_with_valid_data():
    user = create_user(name="John", email="john@test.com")
    assert user.id is not None
    assert user.is_active

# –ü–ª–æ—Ö–æ
def test_user():
    u = create_user("John", "john@test.com")
    assert u.id and u.active
üéì –ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
–°—Ç—Ä—É–∫—Ç—É—Ä–∞
text
project/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ calculator.py
‚îÇ   ‚îî‚îÄ‚îÄ user.py
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ test_calculator.py
‚îÇ   ‚îú‚îÄ‚îÄ test_user.py
‚îÇ   ‚îî‚îÄ‚îÄ conftest.py
‚îú‚îÄ‚îÄ pytest.ini
‚îî‚îÄ‚îÄ requirements.txt
–§–∞–π–ª tests/conftest.py
python
import pytest

@pytest.fixture
def sample_user_data():
    return {
        "name": "Test User",
        "email": "test@example.com",
        "password": "secure123"
    }
–≠—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–±–æ—Ç—ã —Å pytest –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö!